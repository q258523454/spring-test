

# 高版本的(mysql-connector-java) 用 com.mysql.cj.jdbc.Driver
#jdbc.driverClassName=com.mysql.cj.jdbc.Driver
jdbc.driverClassName=com.mysql.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/zhang?useSSL=false&useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull
jdbc.username=root
jdbc.password=123456

#初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时
druid.pool.initialSize =1

#定义最小连接池数量
druid.pool.minIdle=0

#定义最大连接池数量
druid.pool.maxActive=20

#获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
druid.pool.maxWait=60000

# 用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。
druid.pool.validationQuery=SELECT 'x'

# 这里建议配置为TRUE，防止取到的连接不可用。获取链接的时候，不校验是否可用，开启会有损性能
druid.pool.testOnBorrow=false

# 归还连接时检测连接是否有效，做了这个配置会降低性能。
druid.pool.testOnReturn=false

# 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
druid.pool.testWhileIdle=true

# 有两个含义：1) Destroy线程会检测连接的间隔时间;2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明
druid.pool.timeBetweenEvictionRunsMillis=3000

# 配置一个连接在池中最小生存的时间，单位是毫秒
druid.pool.minEvictableIdleTimeMillis=300000

# 打开removeAbandoned功能, 链接使用超过时间限制是否回收
druid.pool.removeAbandoned=true

# 超过时间限制时间（单位秒），目前为30分钟，如果有业务处理时间超过30分钟，可以适当调整, 1800秒，也就是30分钟
druid.pool.removeAbandonedTimeout=1800

# 关闭abanded连接时输出错误日志, 即链接回收的时候控制台打印信息，测试环境可以加上true，线上环境false。会影响性能
druid.pool.logAbandoned=true

# 属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：监控统计用的filter:stat;日志用的filter:log4j;防御sql注入的filter:wall
# 监控中有jdbcSqlStat，原因是：com.alibaba.druid.statJdbcDataSourceStat中的createSqlStat方法中，用了一个map来存放所有的sql语句，这样会导致线上触发FullGC，可将此处注释掉
druid.pool.filters=stat,wall


